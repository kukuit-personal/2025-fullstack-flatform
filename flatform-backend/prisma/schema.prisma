generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  users Users[]

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Session {
  id     Int   @id @default(autoincrement())
  user   Users @relation(fields: [userId], references: [id])
  userId Int

  refreshToken String   @unique @db.VarChar(512)
  expiresAt    DateTime

  ip         String?
  userAgent  String?
  deviceName String?

  createdAt DateTime @default(now())

  @@map("sessions")
}

model Users {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  roleId       Int
  initPassword Boolean   @default(true)
  loginFailed  Int       @default(0)
  lastLoginAt  DateTime?
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Quan hệ
  profile       Profile?
  role          Role           @relation(fields: [roleId], references: [id])
  bookings      Booking[]
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  sessions      Session[] // NEW: quan hệ 1-n đến bảng sessions
  loginLogs     LoginLog[]

  // Quan hệ với noted
  notes          NotedNote[] // notes do user này tạo
  noteCategories NotedCategory[]
  noteTags       NotedTag[]
  sharedNotes    NotedShare[]    @relation("SharedWith") // user được chia sẻ

  @@fulltext([email])
  @@map("users")
}

model Profile {
  id     Int       @id @default(autoincrement())
  userId Int       @unique
  name   String?
  avatar String?
  phone  String?
  gender String?
  dob    DateTime?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
  ip        String
  userAgent String?
  createdAt DateTime @default(now())

  @@map("login_logs")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  imageUrl    String?
  categoryId  Int?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  bookings   Booking[]
  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String
  parentId Int?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Review {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    Users   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Booking {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  bookingTime DateTime
  note        String?
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    Users   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("bookings")
}

model Order {
  id              Int     @id @default(autoincrement())
  userId          Int
  total           Float
  paymentMethod   String
  shippingAddress String?

  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  Users       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("orderitems")
}

model Notification {
  id      Int     @id @default(autoincrement())
  userId  Int
  title   String
  content String
  isRead  Boolean @default(false)

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model CmsPage {
  id          Int     @id @default(autoincrement())
  slug        String  @unique
  title       String
  content     String
  isPublished Boolean @default(true)

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cmspages")
}

model Status {
  id     Int    @id
  status String
  
  NotedNote NotedNote[]

  @@map("status")
}

model NotedNote {
  id         Int      @id @default(autoincrement())
  userId     Int
  title      String
  content    String
  categoryId Int?
  parentId   Int?
  isFavorite Boolean  @default(false)
  isArchived Boolean  @default(false)
  color      String? // mã màu HEX hoặc text
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Quan hệ
  user      Users          @relation(fields: [userId], references: [id])
  category  NotedCategory? @relation(fields: [categoryId], references: [id])
  parent    NotedNote?     @relation("NoteToSubNotes", fields: [parentId], references: [id])
  children  NotedNote[]    @relation("NoteToSubNotes")
  tags      NotedNoteTag[] // many-to-many thông qua table trung gian
  shares    NotedShare[]
  histories NotedHistory[]
  statusId  Int            @default(1) // Mặc định là active
  status    Status         @relation(fields: [statusId], references: [id])

  @@map("noted_notes")
}

model NotedCategory {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())

  user  Users       @relation(fields: [userId], references: [id])
  notes NotedNote[]

  @@map("noted_categories")
}

model NotedTag {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())

  user  Users          @relation(fields: [userId], references: [id])
  notes NotedNoteTag[]

  @@map("noted_tags")
}

model NotedNoteTag {
  id     Int @id @default(autoincrement())
  noteId Int
  tagId  Int

  note NotedNote @relation(fields: [noteId], references: [id])
  tag  NotedTag  @relation(fields: [tagId], references: [id])

  @@unique([noteId, tagId])
  @@map("noted_note_tags")
}

model NotedShare {
  id         Int @id @default(autoincrement())
  noteId     Int
  sharedWith Int // ID người được chia sẻ

  // Nếu có thêm userId (người chia sẻ), thì bạn cần khai báo thêm field này ở đây

  createdAt DateTime @default(now())

  note       NotedNote @relation(fields: [noteId], references: [id])
  sharedUser Users     @relation("SharedWith", fields: [sharedWith], references: [id])

  @@map("noted_shares")
}

model NotedHistory {
  id        Int      @id @default(autoincrement())
  noteId    Int
  content   String
  createdAt DateTime @default(now())

  note NotedNote @relation(fields: [noteId], references: [id])

  @@map("noted_histories")
}
