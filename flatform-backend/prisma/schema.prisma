generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Role {
  id                Int     @id @default(autoincrement())
  name              String  @unique
  description       String?
  url_login_default String  @default("/")

  users Users[]

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model Session {
  id     Int    @id @default(autoincrement())
  user   Users  @relation(fields: [userId], references: [id])
  userId String

  refreshToken String   @unique @db.VarChar(512)
  expiresAt    DateTime

  ip         String?
  userAgent  String?
  deviceName String?

  createdAt DateTime @default(now())

  @@map("sessions")
}

model Users {
  id           String    @id
  email        String    @unique
  password     String
  roleId       Int
  initPassword Boolean   @default(true)
  loginFailed  Int       @default(0)
  lastLoginAt  DateTime?
  status       String    @default("active")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Thêm mới cho social login
  provider   String? // "google", "facebook", "x", "linkedin"
  providerId String? // ID do Google, FB, ... cung cấp

  // Quan hệ
  profile       Profile?
  role          Role           @relation(fields: [roleId], references: [id])
  bookings      Booking[]
  orders        Order[]
  reviews       Review[]
  notifications Notification[]
  sessions      Session[] // NEW: quan hệ 1-n đến bảng sessions
  loginLogs     LoginLog[]

  // Quan hệ với noted
  notes          NotedNote[] // notes do user này tạo
  noteCategories NotedCategory[]
  noteTags       NotedTag[]
  sharedNotes    NotedShare[]    @relation("SharedWith") // user được chia sẻ

  // Quan hệ với email_templates
  emailTemplates EmailTemplate[]
  emailTpTags    EmailTpTag[]
  emailTpShared  EmailTpShare[]  @relation("EmailTpSharedWith")
  emailCustomers EmailCustomer[] @relation(fields: [], references: [])

  @@fulltext([email])
  @@map("users")
}

model Profile {
  id     String    @id
  userId String    @unique
  name   String?
  avatar String?
  phone  String?
  gender String?
  dob    DateTime?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  ip        String
  userAgent String?
  createdAt DateTime @default(now())

  @@map("login_logs")
}

model Product {
  id          String  @id
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  imageUrl    String?
  categoryId  String?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category?   @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  bookings   Booking[]
  orderItems OrderItem[]

  @@map("products")
}

model Category {
  id       String  @id
  name     String
  parentId String?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Review {
  id        String  @id
  userId    String
  productId String
  rating    Int
  comment   String?

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    Users   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Booking {
  id          String   @id
  userId      String
  productId   String
  bookingTime DateTime
  note        String?
  status      String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    Users   @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("bookings")
}

model Order {
  id              String  @id
  userId          String
  total           Float
  paymentMethod   String
  shippingAddress String?

  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  Users       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id
  orderId   String
  productId String
  quantity  Int
  price     Float

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("orderitems")
}

model Notification {
  id      String  @id
  userId  String
  title   String
  content String
  isRead  Boolean @default(false)

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model CmsPage {
  id          String  @id
  slug        String  @unique
  title       String
  content     String
  isPublished Boolean @default(true)

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cmspages")
}

model Status {
  id     Int    @id
  status String

  NotedNote NotedNote[]

  @@map("status")
}

// Noted ----------------------------------------------------------------------------------------------------

model NotedNote {
  id         String   @id
  userId     String
  title      String
  content    String?  @db.Text
  categoryId String?
  parentId   String?
  isFavorite Boolean  @default(false)
  isArchived Boolean  @default(false)
  color      String? // mã màu HEX hoặc text
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Quan hệ
  user      Users          @relation(fields: [userId], references: [id])
  category  NotedCategory? @relation(fields: [categoryId], references: [id])
  parent    NotedNote?     @relation("NoteToSubNotes", fields: [parentId], references: [id])
  children  NotedNote[]    @relation("NoteToSubNotes")
  tags      NotedNoteTag[] // many-to-many thông qua table trung gian
  shares    NotedShare[]
  histories NotedHistory[]
  statusId  Int            @default(1) // Mặc định là active
  status    Status         @relation(fields: [statusId], references: [id])

  @@map("noted_notes")
}

model NotedCategory {
  id        String   @id
  name      String
  userId    String
  createdAt DateTime @default(now())

  user  Users       @relation(fields: [userId], references: [id])
  notes NotedNote[]

  @@map("noted_categories")
}

model NotedTag {
  id        String   @id
  name      String
  userId    String
  createdAt DateTime @default(now())

  user  Users          @relation(fields: [userId], references: [id])
  notes NotedNoteTag[]

  @@map("noted_tags")
}

model NotedNoteTag {
  id     String @id
  noteId String
  tagId  String

  note NotedNote @relation(fields: [noteId], references: [id])
  tag  NotedTag  @relation(fields: [tagId], references: [id])

  @@unique([noteId, tagId])
  @@map("noted_note_tags")
}

model NotedShare {
  id         String @id
  noteId     String
  sharedWith String // ID người được chia sẻ

  // Nếu có thêm userId (người chia sẻ), thì bạn cần khai báo thêm field này ở đây

  createdAt DateTime @default(now())

  note       NotedNote @relation(fields: [noteId], references: [id])
  sharedUser Users     @relation("SharedWith", fields: [sharedWith], references: [id])

  @@map("noted_shares")
}

model NotedHistory {
  id        String   @id
  noteId    String
  content   String
  createdAt DateTime @default(now())

  note NotedNote @relation(fields: [noteId], references: [id])

  @@map("noted_histories")
}

// Email_templates ----------------------------------------------------------------------------------------------------
// ---------- Enums ----------
enum EmailTpPermission {
  VIEW
  EDIT
  OWNER
}

// ---------- Status cho email templates ----------
model EmailTpStatus {
  id        Int             @id
  status    String          @unique
  templates EmailTemplate[]

  @@map("email_tp_status")
}

// ---------- KHÁCH HÀNG ----------
model EmailCustomer {
  id      String  @id @default(cuid())
  name    String
  email   String? @db.VarChar(191)
  phone   String? @db.VarChar(64)
  company String?
  notes   String? @db.Text

  // (tuỳ chọn) gắn owner để biết khách hàng của user nào
  userId String?
  owner  Users?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  // liên kết ngược: các template gắn với customer này
  templates EmailTemplate[]

  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([email])
  @@map("email_customer")
}

// ---------- TEMPLATE chính ----------
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  slug        String?  @unique
  description String?
  html        String   @db.LongText // Nội dung HTML
  hasImages   Boolean  @default(false) // true nếu có ảnh đính kèm
  price       Decimal? @db.Decimal(10, 2) // Có hoặc không
  currency    String?  @default("USD")
  urlThumbnail     String? @map("url_thumbnail")      @db.VarChar(512)
  urlThumbnailX600 String? @map("url_thumbnailx600")  @db.VarChar(512)

  // Liên kết User tạo template
  userId  String
  creator Users  @relation(fields: [userId], references: [id], onDelete: Restrict)

  // (mới) Liên kết tùy chọn tới Customer — có thể để trống
  customerId String?
  customer   EmailCustomer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // Trạng thái
  statusId Int           @default(1)
  status   EmailTpStatus @relation(fields: [statusId], references: [id])

  // Quan hệ mở rộng
  images EmailTpImage[]
  tags   EmailTpTemplateTag[]
  shares EmailTpShare[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([createdAt])
  @@index([statusId])
  @@index([price])
  @@index([customerId])
  @@map("email_templates")
}

// ---------- Ảnh đính kèm template ----------
model EmailTpImage {
  id         String        @id @default(cuid())
  templateId String
  template   EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  url      String
  filename String?
  mimeType String?
  width    Int?
  height   Int?
  bytes    Int?

  createdAt DateTime @default(now())

  @@unique([templateId, filename])
  @@map("email_tp_images")
}

// ---------- Tag ----------
model EmailTpTag {
  id     String  @id @default(cuid())
  name   String
  userId String?
  owner  Users?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  templates EmailTpTemplateTag[]

  createdAt DateTime @default(now())

  @@unique([name, userId])
  @@index([name])
  @@map("email_tp_tag")
}

// ---------- Bảng nối template–tag ----------
model EmailTpTemplateTag {
  id         String @id @default(cuid())
  templateId String
  tagId      String

  template EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  tag      EmailTpTag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([templateId, tagId])
  @@index([tagId])
  @@map("email_tp_template_tag")
}

// ---------- Chia sẻ template ----------
model EmailTpShare {
  id         String            @id @default(cuid())
  templateId String
  sharedWith String
  permission EmailTpPermission @default(VIEW)

  template EmailTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user     Users         @relation("EmailTpSharedWith", fields: [sharedWith], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([templateId, sharedWith])
  @@map("email_tp_share")
}
